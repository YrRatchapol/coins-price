//
//  CoinDetailViewController.swift
//  CoinPrice
//
//  Created by Ratchapol Pattarakanoksiri on 10/3/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol CoinDetailDisplayLogic: AnyObject {
    func displayCoinDetail(viewModel: CoinDetail.GetCoinDetail.ViewModel)
    func displayGoToWebSite(viewModel: CoinDetail.GoToWebsite.ViewModel)
}

class CoinDetailViewController: UIViewController, CoinDetailDisplayLogic {
    var interactor: CoinDetailBusinessLogic?
    var router: (NSObjectProtocol & CoinDetailRoutingLogic & CoinDetailDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = CoinDetailInteractor()
        let presenter = CoinDetailPresenter()
        let router = CoinDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        getCoinDetail()
    }

    // MARK: Do something

    @IBOutlet weak var contentView: UIView!

    @IBOutlet weak var iconImageView: UIImageView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var symbolLabel: UILabel!
    @IBOutlet weak var priceLabel: UILabel!
    @IBOutlet weak var marketCapLabel: UILabel!

    @IBOutlet weak var detailLabel: UILabel!

    func getCoinDetail() {
        contentView.alpha = 0
        let request = CoinDetail.GetCoinDetail.Request()
        interactor?.doGetCoinDetail(request: request)
    }

    func displayCoinDetail(viewModel: CoinDetail.GetCoinDetail.ViewModel) {
        contentView.alpha = 1
        if let url = URL(string: viewModel.iconImageUrlString ?? "") {
            iconImageView.kf.setImage(with: url)
        }

        nameLabel.text = viewModel.name
        if let nameColorHex = viewModel.nameColorHex {
            nameLabel.textColor = UIColor(hex: nameColorHex)
        }
        symbolLabel.text = viewModel.symbol
        priceLabel.text = viewModel.price
        marketCapLabel.text = viewModel.marketCap
        detailLabel.text = viewModel.detail
    }

    func displayGoToWebSite(viewModel: CoinDetail.GoToWebsite.ViewModel) {
        if let url = viewModel.url {
            UIApplication.shared.open(url)
        }
    }

    @IBAction func onTapCloseButton() {
        dismiss(animated: true)
    }

    @IBAction func onTapGoToWebSiteButton() {
        interactor?.doGoToWebsite(request: CoinDetail.GoToWebsite.Request())
    }
}
